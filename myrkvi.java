/* The following code was generated by JFlex 1.4.3 on 2/25/14 4:33 PM */

/*
*   Author: Tumi Snær Gíslason
*
*   Prototype -> Takes a text file as input and 
*               writes out a sequence of lexemes and tokens,
*               one pair in each line.
*
*   A lexical analyser for the programming language Myrkvi,
*   using JFlex (the JFlex.jar file is required).
*   
*   Compilation:
*       java -jar JFlex.jar myrkvi.jflex
*       javac myrkvi.java
*
*   Example of usage:
*       java myrkvi < test.txt
*
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/25/14 4:33 PM from the specification file
 * <tt>myrkvi.jflex</tt>
 */
public class myrkvi {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\43\1\44\22\0\1\1\1\27\1\30\1\42"+
    "\1\0\2\27\1\33\3\27\1\26\1\0\1\26\1\24\1\27\4\34"+
    "\4\34\2\23\1\27\1\0\4\27\1\0\4\27\1\25\1\36\5\27"+
    "\1\41\1\27\1\37\5\27\1\35\1\40\5\27\1\0\1\31\1\0"+
    "\1\27\2\0\1\22\1\32\1\15\1\12\1\5\1\4\1\27\1\11"+
    "\1\3\2\27\1\6\1\27\1\14\1\17\2\27\1\20\1\7\1\16"+
    "\1\13\1\21\1\10\3\27\4\27\6\0\1\43\73\0\1\27\4\0"+
    "\1\27\2\0\1\27\3\0\1\27\2\0\1\27\2\0\1\27\2\0"+
    "\1\27\3\0\1\27\2\0\2\27\2\0\1\27\4\0\1\27\2\0"+
    "\1\27\3\0\1\27\2\0\1\27\2\0\1\27\2\0\1\27\3\0"+
    "\1\27\2\0\2\27\u1f29\0\2\43\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\10\1\1\4\4\1\1\2\1\5"+
    "\6\1\2\0\1\1\1\0\3\1\1\0\3\6\4\1"+
    "\1\7\1\1\1\10\1\4\1\0\1\4\3\1\1\11"+
    "\1\1\1\12\1\13\2\1\1\0\1\4\1\1\1\14"+
    "\1\1\1\4\1\0\1\1\1\15\1\1\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\45\0\112\0\157\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\271\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309"+
    "\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u022b"+
    "\0\45\0\u022b\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\271"+
    "\0\u04ea\0\271\0\u050f\0\u0534\0\45\0\u0559\0\u057e\0\u05a3"+
    "\0\45\0\u05c8\0\271\0\271\0\u05ed\0\u0612\0\u0637\0\271"+
    "\0\u065c\0\271\0\u0681\0\u06a6\0\u06a6\0\u06cb\0\271\0\u06f0"+
    "\0\271";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\2\7\1\10\1\7"+
    "\1\11\5\7\1\12\1\13\1\7\1\14\1\2\3\7"+
    "\1\15\1\2\1\7\1\2\1\14\1\16\1\17\1\20"+
    "\2\7\1\21\1\2\1\3\50\0\1\7\1\22\17\7"+
    "\1\0\4\7\1\0\1\7\1\0\6\7\6\0\10\7"+
    "\1\23\10\7\1\0\4\7\1\0\1\7\1\0\6\7"+
    "\6\0\3\7\1\24\15\7\1\0\4\7\1\0\1\7"+
    "\1\0\6\7\6\0\21\7\1\0\4\7\1\0\1\7"+
    "\1\0\6\7\6\0\6\7\1\25\12\7\1\0\4\7"+
    "\1\0\1\7\1\0\6\7\6\0\2\7\1\26\16\7"+
    "\1\0\4\7\1\0\1\7\1\0\6\7\6\0\2\7"+
    "\1\27\16\7\1\0\4\7\1\0\1\7\1\0\6\7"+
    "\6\0\17\7\1\30\1\7\1\0\4\7\1\0\1\7"+
    "\1\0\6\7\6\0\20\7\1\14\1\31\4\7\1\0"+
    "\1\7\1\0\1\14\5\7\3\0\3\32\21\15\1\32"+
    "\3\15\1\33\1\34\1\15\1\32\6\15\3\32\3\0"+
    "\15\7\1\35\3\7\1\0\4\7\1\0\1\7\1\0"+
    "\6\7\6\0\17\7\1\36\1\7\1\0\4\7\1\0"+
    "\1\7\1\0\6\7\6\0\21\7\1\0\4\7\1\0"+
    "\1\7\1\0\4\7\1\37\1\7\3\0\2\40\1\41"+
    "\40\40\1\42\1\43\3\0\11\7\1\44\7\7\1\0"+
    "\4\7\1\0\1\7\1\0\6\7\6\0\1\45\3\7"+
    "\1\46\14\7\1\0\4\7\1\0\1\7\1\0\6\7"+
    "\6\0\1\47\20\7\1\0\4\7\1\0\1\7\1\0"+
    "\6\7\6\0\1\7\1\50\17\7\1\0\4\7\1\0"+
    "\1\7\1\0\6\7\6\0\13\7\1\51\5\7\1\0"+
    "\4\7\1\0\1\7\1\0\6\7\6\0\15\7\1\52"+
    "\3\7\1\0\4\7\1\0\1\7\1\0\6\7\26\0"+
    "\1\53\10\0\1\53\10\0\30\32\1\54\1\34\13\32"+
    "\3\0\21\7\1\0\4\7\1\0\1\7\1\55\6\7"+
    "\7\0\1\32\7\0\1\32\1\0\1\32\1\0\1\32"+
    "\7\0\5\32\13\0\10\7\1\56\10\7\1\0\4\7"+
    "\1\0\1\7\1\0\6\7\6\0\3\7\1\57\15\7"+
    "\1\0\4\7\1\0\1\7\1\0\6\7\6\0\21\7"+
    "\1\0\4\7\1\0\1\7\1\0\5\7\1\60\3\0"+
    "\2\40\1\61\40\40\1\42\1\43\3\0\12\7\1\62"+
    "\6\7\1\0\4\7\1\0\1\7\1\0\6\7\6\0"+
    "\1\7\1\63\17\7\1\0\4\7\1\0\1\7\1\0"+
    "\6\7\6\0\2\7\1\64\16\7\1\0\4\7\1\0"+
    "\1\7\1\0\6\7\6\0\3\7\1\65\15\7\1\0"+
    "\4\7\1\0\1\7\1\0\6\7\6\0\10\7\1\66"+
    "\10\7\1\0\4\7\1\0\1\7\1\0\6\7\10\0"+
    "\1\67\15\0\1\53\1\0\1\67\6\0\1\53\43\0"+
    "\1\55\14\0\2\7\1\70\16\7\1\0\4\7\1\0"+
    "\1\7\1\0\6\7\6\0\4\7\1\56\14\7\1\0"+
    "\4\7\1\0\1\7\1\0\6\7\6\0\21\7\1\0"+
    "\4\7\1\0\1\7\1\0\5\7\1\70\6\0\13\7"+
    "\1\71\5\7\1\0\4\7\1\0\1\7\1\0\6\7"+
    "\6\0\2\7\1\72\16\7\1\0\4\7\1\0\1\7"+
    "\1\0\6\7\6\0\15\7\1\73\3\7\1\0\4\7"+
    "\1\0\1\7\1\0\6\7\26\0\1\74\2\0\1\75"+
    "\5\0\1\74\13\0\1\76\20\7\1\0\4\7\1\0"+
    "\1\7\1\0\6\7\6\0\11\7\1\77\7\7\1\0"+
    "\4\7\1\0\1\7\1\0\6\7\26\0\1\74\10\0"+
    "\1\74\13\0\14\7\1\100\4\7\1\0\4\7\1\0"+
    "\1\7\1\0\6\7\6\0\11\7\1\101\7\7\1\0"+
    "\4\7\1\0\1\7\1\0\6\7\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1813];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\25\1\2\0\1\1\1\0\3\1\1\0"+
    "\1\11\12\1\1\0\1\11\3\1\1\11\5\1\1\0"+
    "\5\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public final int _error = -1;
    public final int _if = 0;
    public final int _elif = 1;
    public final int _else = 2;
    public final int _while = 3;
    public final int _def = 4;
    public final int _func = 5;
    public final int _ret = 6;
    public final int _var = 7;
    public final int _literal = 8;
    public final int _name = 9;
    
    public int getLine(){return yyline;}
    public int getColumn(){return yycolumn;}

    class Yytoken{

        public int tok;
        public String text;
        public Yytoken(int tok, String text){

            this.tok = tok;
            this.text = text;

        }

    }

    public static void main(String[]args)
    throws Exception{

        Yytoken token;
        myrkvi lexer = new myrkvi(System.in);
        while((token=lexer.yylex()) != null){

            int line = lexer.getLine();
            int column = lexer.getColumn();
            int tok = token.tok;
            String text = token.text;
            System.out.println("Line "+line+", column "+column+", lexeme \""+text+"\", token "+tok);

        }

    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public myrkvi(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public myrkvi(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return new Yytoken(_func,yytext());
          }
        case 15: break;
        case 13: 
          { return new Yytoken(_ret,yytext());
          }
        case 16: break;
        case 11: 
          { return new Yytoken(_else,yytext());
          }
        case 17: break;
        case 2: 
          { return(new Yytoken(_error,yytext()));
          }
        case 18: break;
        case 10: 
          { return new Yytoken(_elif,yytext());
          }
        case 19: break;
        case 8: 
          { return new Yytoken(_var,yytext());
          }
        case 20: break;
        case 1: 
          { return new Yytoken(_name,yytext());
          }
        case 21: break;
        case 12: 
          { return new Yytoken(_while,yytext());
          }
        case 22: break;
        case 7: 
          { return new Yytoken(_def,yytext());
          }
        case 23: break;
        case 5: 
          { return new Yytoken(_if,yytext());
          }
        case 24: break;
        case 4: 
          { return new Yytoken(_literal,yytext());
          }
        case 25: break;
        case 9: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { 
          }
        case 26: break;
        case 3: 
          { 
          }
        case 27: break;
        case 6: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { 
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
